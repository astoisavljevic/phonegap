1. A BIT of history

    Delivering content to mobile users always was/is a challenge for
application architects.
Some of the things that you have to think about are:
    - how to efficiently update content
    - usage of familiar technologies, etc.

Let we do a small time travel in past. Our destination: moment when
smart-phones hit the market.
At that moment applications could be grouped in two main categories:
    - pure web-based applications - all of their content was coming
from a server, and as opposite to this approach
    - pure mobile applications, where all of their content resides
on a mobile device.

Each of these approaches has it's own advantages and disadvantages.

Mobile applications
-------------------

Pros:
    - Fast (this comes from the fact that all of the needed resources
are already on the device)
    - Easy for user to find (go to market, download and have it on phone
in applications)

Cons:
    - Hard to update - each fix or update is subject of review hence
time to "hit" end user can be long

Pure web applications
---------------------

Pros:
    - Easy to update - all of the content is changed on server thus
immediately available to end user to use

Cons:
    - Slow - network is crucial resource here (speed, quality, coverage, ...)
    - Hard to find - user has to remember URL, dealing with bookmarks, etc.
<
some url to show:
# LinkedIn Generic WebApplication: https://touch.www.linkedin.com/login.html
# Wikipedia: http://en.m.wikipedia.org/wiki/Main_Page
>
Therefore combination of these two "worlds" seems logical.


[SWITCH SLIDE]

2. Hybrid Mobile Application Development

    Previously we saw best features of mobile and web-based applications.
We could define "hybrid" applications as application that can be partitioned
so that part runs on mobile device and part is delivered by server.

<image that shows hybrid application combine resources both from device and web>

What makes hybrid application successful?

1. User must not be affected with transition between resources from device and web.

2. User interface should look like a mobile app, both mobile and web-based sides.
Challenge to provide almost same user experience over different devices. Try to imagine
situation where user is using one device on his/her work and home using different platform.

Let's concentrate now on this part of "hybrid" definition:
"application that can be partitioned so that part runs on mobile device and part is delivered by server."
Since you are here and not on presentation of "high performance PHP" I will assume that
you have some experience on mobile development. So if you are not at level of "Hello World"
application development, you must use at least some colaboration between your code and
some 3rd party service. Nowadays, this can be done in various ways: SOAP, XML, JSON, ...

Currently I'm working on some project that we provide REST API with endpoints that consumes/produces
JSON. And also we have colleagues in Holland, iOS developers and Android developers.
As a result we have web application, and one thin client application for iOS and one for Android.

Ok, now here comes the "punch line". One day when we sail in "shallow waters of project maintanance",
product owners decide to extend business and to support Windows Phone. And suddenly we are in problem.
First you need to find programmer that can accomplish the job. Even he is the best programmer in the
world, you will have to support him for some time, explaining each endpoint, explain different
combination of request parameters, etc. It will cost you, beside nerves which you will lose anyway,
time. Time.equals(Money) = TRUE.
And suddenly management decides to go with version for BlackBerry :)

Now you see the point. Mobile devices OS fragmentation is "nightmare" for the programmers.

<image that show the room with lot of mobile devices on single table>

Can we have single source code base?

[SWITCH SLIDE]

3. Mobile Application Development Tools

Average users like mobile applications. Saturday night, sitting and watching TV, you take your phone/tablet
turn on network and browse through stores.

I've retrieved some numbers:
    Apple iOS Market ~ 1.000.000 apps,
    Android Play Store ~ 800.000 apps,

In order to build these applications developers has following tools:
1. Android - Java - Eclipse, Android Studio, Netbeans, etc.
2. iOS - Objective C - X-Code
3. Windows Phone - C# - Visual Studio

And what is most problematic is those tools are INCOMPATIBLE.
This leads to developer "LOCK IN". This is good for Google, Microsoft, Apple, ... but
really bad for developers.

Explain term "LOCK IN" - example of locked SIM card for mobile phones.

So let's "fight one battle at a time". So let's get rid of different code: Java, Objective-C, C#, C++

- What else can we use?
- What is common for all mobile platforms? - Browser as common platform (usually WebKit, of course except Microsoft - IE7 based)
- All the mobile platforms support embedding browsers in applications - WebViews
-> HTML5, CSS3 and JS saves the day! It provides same great user experience, but it's open
standard, not owned by any company.

[SWITCH SLIDE]

4. What is PhoneGap

    PhoneGap is an open-source mobile framework that enables authoring of native mobile applications using
well-known HTML, CSS, and JS technologies and same time providing access to native hardware features of the
mobile device through a common platform-independent JavaScript API (camera, GPS, etc).
Finally it packages your app so it can be published in the various app stores and markets.

[PRESS paragraph and switch to PhoneGap Architecture]

How everything started? In 2008. Nitobi .com has initial idea to simplify cross-platform development.
Firstly they made framework and right away started to work on supporting platforms. As a result first
supporting platforms were: Android and BlackBerry.
Their effort couldn't pass un-noticed and in 2011 Adobe bought Nitobi. At that moment they published code
under Apache "umbrella" with the codename Apache Cordova. Phonegap still exists as brand name, and they work
simultaniously on both codes but the fact is that now they are paid for they work.
For a developers nothing has changed. For you to understand the difference is that you can think about Apache Cordova
as engine that drives PhoneGap :)

[SWITCH SLIDE]

5. 1st break - DEMO #1 -

    DEMO #1 (basic info, contacts, ...)

    Now let's take a minute to pray to "Gods of DEMO's" :) Funny video: http://www.youtube.com/watch?v=IW7Rqwwth84
Ok, I didn't want you to go out from this presentation and not bringing something with you. So first I thought,
let's buy a bottle of rakia to each of you :)
Kidding, of course. But not completely. I will now pass you a page with printed bar code, so you can download
APK file or other (). Unfortunately if you are using iPhone, I do not have keys for Apple store, that
developers licence, so tough luck for you today :(

First demo is just simple getting some information about your phone: device name, platform, etc.

<click on 5. Time for 1st break to open pictures of application runing on different platforms>


[SWITCH SLIDE]

6. Anyone smell problems?

    - Advanced stuff. We talked about using services from web, now it is time to show this!
    <image how phoneGap wraps HTML5, CSS and JS>

    - Talk about problem of Same Origin Policy
    <image about SameOriginPolicy>

    For those of you who have worked with Ajax-based applications, you know that a web application hosted at
“www.example.com” cannot make Ajax calls to a web service hosted at “www.some-other-domain.com.”
 This is called a same origin policy. http://en.wikipedia.org/wiki/Same_origin_policy.

On the other hand same is not applicable for a PhoneGap application. A PhoneGap application bundles the required HTML,
JavaScript, and CSS files, and PhoneGap applications do not have domains like “example.com.”
This allows PhoneGap to be a platform for the easy development of mashups, which can freely make Ajax calls to
various other sites.
Think about your PhoneGap application integrating Facebook, Twitter, and Flickr all into
one mashup, with just a few lines of JavaScript code.

The same origin policy does not apply to the file:// protocol.
http://en.wikipedia.org/wiki/Same_origin_policy#Corner_cases_and_exceptions

PhoneGap apps imbed a web view which loads it local html files using
the file:// protocol. Thus you can do cross domain XHR from PhoneGap
apps.

[SWITCH SLIDE]


7. Single Page Applications

    As you may noticed, we deliberately set this presentation after previous presentation about Single
Page Applications. There is a good reason for that. And I will show some stuff of SPA concepts in
following demo. So just be patient ...

Why do we want to write single page apps? The main reason is that they allow us to offer a
more-native-app-like experience to the user.
Single page apps are distinguished by their ability to redraw any part of the UI without requiring
a server roundtrip to retrieve HTML. This is achieved by separating the data from the presentation
of data by having a model layer that handles data and a view layer that reads from the models.


[SWITCH SLIDE]


8. 2nd break - DEMO #2 - Simple Time Tracker


[SWITCH SLIDE]


9. Advanced features of PhoneGap

    Talk about PhoneGap plugins


[SWITCH SLIDE]


10. PhoneGap Build

    Remember audience about problem with complexity of programming languages.
Now we still have problems that we must have actual development tool to "wrap things up",
put nice ribbon and deliver to markets.
In order to remove last "LOCK IN" developer can use PhoneGapBuild.

Show the PhoneGap Build process (use PhoneGapDeviceInfo as example.)

[SWITCH SLIDE]


11. Questions & Answers

    Before last slide: Give personal opinion on this. (remember Facebook and HTML5 vs. native)
I will steal you one/two more minutes (to prevent you asking me too many questions) :)
Usually I get questions: How this works in practice? Can you really do some real, production ready
stuf with HTML5, CSS3, JS and finally PhoneGap?
I have to say YES!

But did we have problems? YES!

And as usual, you don't see the problems until the moment that you "deep dived" :)

Let me just mention some of the problems:
- fixed position elements (iScroll)
- webkit browsers that is not 100% CSS3 compatible
- different platforms with/without support for H/W acceleration (drop shadows, linear/radial gradients, ...) we have
to trade off a lot
- windows phone, IE-7 based, no media queries, no CSS3 - not our target platform
- draining the battery
- some of the features must be re-thinked/rejected due to technology limits (number of simultaneous connections by mobile browsers)

[SWITCH SLIDE]

12. Resources


[SWITCH SLIDE]

12. Thank You




