1. A BIT of history

    Delivering content to mobile users always was/is a challenge for
application architects.
Some of the things that you have to think about are:
    - how to efficently update content
    - usage of familiar technologies, etc.

Let we do a small time travel in past. Our destination: moment when
smart-phones hit the market.
At that moment applications could be grouped in two main categories:
    - pure web-based applications - all of their content was coming
from a server, and as opposite to this approach
    - pure mobile applications, where all of their content resides
on a mobile device.

Each of these approaches has it's own advantages and disadvantages.

Mobile applications
-------------------

Pros:
    - Fast (this comes from the fact that all of the needed resources
are already on the device)
    - Easy for user to find (go to market, download and have it on phone
in applications)

Cons:
    - Hard to update - each fix or update is subject of review hence
time to "hit" end user can be long

Pure web applications
---------------------

Pros:
    - Easy to update - all of the content is changed on server thus
immediately available to end user to use

Cons:
    - Slow - network is crucial resource here (speed, quality, coverage, ...)
    - Hard to find - user has to remember URL, dealing with bookmarks, etc.
<
some url to show:
# LinkedIn Generic WebApplication: https://touch.www.linkedin.com/login.html
# Wikipedia: http://en.m.wikipedia.org/wiki/Main_Page
>
Therefore combination of these two "worlds" seems logical.


[SWITCH SLIDE]

2. Hybrid Mobile Application Development

    Previously we saw best features of mobile and web-based applications.
We could define "hybrid" applications as application that can be partitioned
so that part runs on mobile device and part is delivered by server.

<image that shows hybrid application combine resources both from device and web>

What makes hybrid application successful?

- User must not be affected with transition between resources from device and
web.
- User interface should look like a mobile app, both mobile and web-based sides.


Let's concentrate now on this part of "hybrid" definition:
"application that can be partitioned so that part runs on mobile device and part is delivered by server."
Since you are here and not on presentation of "high performance PHP" I will assume that
you have some experience on mobile development. So if you are not at level of "Hello World"
application development, you must use at least some colaboration between your code and
some 3rd party service. Nowadays, this can be done in various ways: SOAP, XML, JSON, ...

Currently I'm working on some project that we provide REST API with endpoints that consumes/produces
JSON. And also we have coleagues in Holland, iOS developers and Android developers.
As a result we have web application, and one thin client application for iOS and one for Android.

Ok, now here comes the "punch line". One day when we sail in "shallow waters of project maintanance",
product owners decide to extend business and to support Windows Phone. And suddenly we are in problem.
First you need to find programmer that can acomplish the job. Even he is the best programmer in the
world, you will have to support him for some time, explaining each endpoint, explain different
combination of request parameters, etc. It will cost you, beside nerves which you will lose anyway,
time. Time.equals(Money) = TRUE.
And suddenly management decides to go with version for BlackBerry :)

Now you see the point. Mobile devices segmentation is "nightmare" for the programmers.

<image that show the room with lot of mobile devices on single table>

Can we have single source code base?

[SWITCH SLIDE]

3. Mobile Application Development Tools

Average users like mobile applications. Saturday night, sitting and watching TV, you take your phone/tablet
turn on network and browse through stores.

I've retrieved some numbers:
    Apple iOS Market ~ 1.000.000 apps,
    Android Play Store ~ 800.000 apps,

In order to build these applications developers has following tools:
1. Android - Java - Eclipse, Android Studio, Netbeans, etc.
2. iOS - Objective C - X-Code
3. Windows Phone - C# - Visual Studio

And what is most problematic is those tools are INCOMPATIBLE.
This leads to developer "LOCK IN". This is good for Google, Microsoft, Apple, ... but
really bad for developers.

Explain term "LOCK IN" - example of locked SIM card for mobile phones.

So let's "fight one battle at a time". So let's get rid of different code: Java, Objective-C, C#, C++

What else can we use? HTML5, CSS3 and JS saves the day! It provides same great user experience, but it's open
standard, not owned by any company.

[SWITCH SLIDE]

4. What is PhoneGap


[SWITCH SLIDE]

5. 1st break - DEMO #1 -

    DEMO #1 (basic info, gps, ...)

[SWITCH SLIDE]

6. Anyone smell problems?

    - Advanced stuff. We talked about using services from web, now it is time to show this!
    <image how phoneGap wraps HTML5, CSS and JS>

    - Talk about problem of Same Origin Policy
    <image about SameOriginPolicy>

[SWITCH SLIDE]


7. Single Page Applications

    Small side talk for those that wasn't on Milos Jovanovic presentation about SPA and BackboneJS.

[SWITCH SLIDE]


8. 2nd break - DEMO #2 -


[SWITCH SLIDE]


9. Advanced features of PhoneGap

    Talk about PhoneGap plugins


[SWITCH SLIDE]


10. PhoneGap Build

    Remember audience about problem with complexity of programming languages.
Now we still have problems that we must have actual development tool to "wrap things up",
put nice ribbon and deliver to markets.
In order to remove last "LOCK IN" developer can use PhoneGapBuild.

Some words on this.

[SWITCH SLIDE]


11. Questions & Answers

    Before last slide: Give personal opinion on this. (remember Facebook and HTML5 vs. native)

[SWITCH SLIDE]

12. Resources


[SWITCH SLIDE]

12. Thank You




